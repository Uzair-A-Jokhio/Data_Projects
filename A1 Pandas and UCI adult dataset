{"metadata":{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":205932,"sourceType":"datasetVersion","datasetId":32132}],"dockerImageVersionId":11105,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<center>\n<img src=\"https://habrastorage.org/files/fd4/502/43d/fd450243dd604b81b9713213a247aa20.jpg\">\n    \n## [mlcourse.ai](mlcourse.ai) – Open Machine Learning Course \n\n<center>Author: [Yury Kashnitskiy](http://yorko.github.io) <br>\nTranslated and edited by [Sergey Isaev](https://www.linkedin.com/in/isvforall/), [Artem Trunov](https://www.linkedin.com/in/datamove/), [Anastasia Manokhina](https://www.linkedin.com/in/anastasiamanokhina/), and [Yuanyuan Pao](https://www.linkedin.com/in/yuanyuanpao/) <br>All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) license.","metadata":{"_uuid":"570fb89bb4f7838b1d0fdff70b2935790e5dbdbe"}},{"cell_type":"markdown","source":"# <center> Assignment #1 (demo)\n## <center>  Exploratory data analysis with Pandas\n","metadata":{"_uuid":"998fc5f76227ab1df9460a7b05c508304b14b3a6"}},{"cell_type":"markdown","source":"**In this task you should use Pandas to answer a few questions about the [Adult](https://archive.ics.uci.edu/ml/datasets/Adult) dataset. (You don't have to download the data – it's already here). Choose the answers in the [web-form](https://docs.google.com/forms/d/1uY7MpI2trKx6FLWZte0uVh3ULV4Cm_tDud0VDFGCOKg). This is a demo version of an assignment, so by submitting the form, you'll see a link to the solution .ipynb file.**","metadata":{"_uuid":"89ef93231815456f4e0bc5dcc00b094aee800993"}},{"cell_type":"markdown","source":"Unique values of all features (for more information, please see the links above):\n- `age`: continuous.\n- `workclass`: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.\n- `fnlwgt`: continuous.\n- `education`: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.\n- `education-num`: continuous.\n- `marital-status`: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.\n- `occupation`: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.\n- `relationship`: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.\n- `race`: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.\n- `sex`: Female, Male.\n- `capital-gain`: continuous.\n- `capital-loss`: continuous.\n- `hours-per-week`: continuous.\n- `native-country`: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.   \n- `salary`: >50K,<=50K","metadata":{"_uuid":"c322301ac858c748f8f80e63cf6f734fc70dde30"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"d3eb2411e23b7db11e4cbbb498a42752442a6f4c","execution":{"iopub.status.busy":"2024-06-08T17:49:59.387479Z","iopub.execute_input":"2024-06-08T17:49:59.387925Z","iopub.status.idle":"2024-06-08T17:50:00.521195Z","shell.execute_reply.started":"2024-06-08T17:49:59.387855Z","shell.execute_reply":"2024-06-08T17:50:00.519540Z"},"trusted":true},"execution_count":59,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('../input/adult.data.csv')\ndata.head()","metadata":{"_uuid":"c5119d1b8151029b4ff57735c4279b795ae492a2","execution":{"iopub.status.busy":"2024-06-08T17:09:10.070766Z","iopub.execute_input":"2024-06-08T17:09:10.071121Z","iopub.status.idle":"2024-06-08T17:09:10.231724Z","shell.execute_reply.started":"2024-06-08T17:09:10.071067Z","shell.execute_reply":"2024-06-08T17:09:10.230456Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   age         workclass  fnlwgt  ...   hours-per-week  native-country salary\n0   39         State-gov   77516  ...               40   United-States  <=50K\n1   50  Self-emp-not-inc   83311  ...               13   United-States  <=50K\n2   38           Private  215646  ...               40   United-States  <=50K\n3   53           Private  234721  ...               40   United-States  <=50K\n4   28           Private  338409  ...               40            Cuba  <=50K\n\n[5 rows x 15 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>fnlwgt</th>\n      <th>education</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>39</td>\n      <td>State-gov</td>\n      <td>77516</td>\n      <td>Bachelors</td>\n      <td>13</td>\n      <td>Never-married</td>\n      <td>Adm-clerical</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>2174</td>\n      <td>0</td>\n      <td>40</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>50</td>\n      <td>Self-emp-not-inc</td>\n      <td>83311</td>\n      <td>Bachelors</td>\n      <td>13</td>\n      <td>Married-civ-spouse</td>\n      <td>Exec-managerial</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>0</td>\n      <td>13</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38</td>\n      <td>Private</td>\n      <td>215646</td>\n      <td>HS-grad</td>\n      <td>9</td>\n      <td>Divorced</td>\n      <td>Handlers-cleaners</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>0</td>\n      <td>40</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53</td>\n      <td>Private</td>\n      <td>234721</td>\n      <td>11th</td>\n      <td>7</td>\n      <td>Married-civ-spouse</td>\n      <td>Handlers-cleaners</td>\n      <td>Husband</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>0</td>\n      <td>40</td>\n      <td>United-States</td>\n      <td>&lt;=50K</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28</td>\n      <td>Private</td>\n      <td>338409</td>\n      <td>Bachelors</td>\n      <td>13</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>0</td>\n      <td>40</td>\n      <td>Cuba</td>\n      <td>&lt;=50K</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**1. How many men and women (*sex* feature) are represented in this dataset?** ","metadata":{"_uuid":"6b19853f936853d40971b56f4d298ab55ee78cac"}},{"cell_type":"code","source":"men = data[data['sex'] =='Male' ]\nwomen = data[data['sex']=='Female']\nprint(len(men))\nprint(len(women))","metadata":{"_uuid":"d32cafcbe966dbdfa40c3017d16d6f8c96bfb3e2","execution":{"iopub.status.busy":"2024-06-08T17:36:50.588591Z","iopub.execute_input":"2024-06-08T17:36:50.588965Z","iopub.status.idle":"2024-06-08T17:36:50.625218Z","shell.execute_reply.started":"2024-06-08T17:36:50.588905Z","shell.execute_reply":"2024-06-08T17:36:50.623900Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"21790\n10771\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**2. What is the average age (*age* feature) of women?**","metadata":{"_uuid":"4748793234a5d325ea60d13331ecf93e29774523"}},{"cell_type":"code","source":"women_avg_age = women['age'].mean()\nprint(f'the average age of a women is {women_avg_age:.2f}')","metadata":{"_uuid":"64f60d928855107d8980875656dcdf3587d91646","execution":{"iopub.status.busy":"2024-06-08T17:37:20.181869Z","iopub.execute_input":"2024-06-08T17:37:20.182239Z","iopub.status.idle":"2024-06-08T17:37:20.188814Z","shell.execute_reply.started":"2024-06-08T17:37:20.182182Z","shell.execute_reply":"2024-06-08T17:37:20.187460Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"the average age of a women is 36.86\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**3. What is the percentage of German citizens (*native-country* feature)?**","metadata":{"_uuid":"80e87c421c348067e88769c64e554206c51727d1"}},{"cell_type":"code","source":"# You code here\ngerman = data[data['native-country'] == 'Germany']\npercentage_german = (len(german) / len(data)) * 100\nprint(f'Percentage of German: {percentage_german:.2f}')","metadata":{"_uuid":"ca9807509692638bd945671ed7d8b4a5ad1f3626","execution":{"iopub.status.busy":"2024-06-08T17:38:57.973711Z","iopub.execute_input":"2024-06-08T17:38:57.974121Z","iopub.status.idle":"2024-06-08T17:38:57.990178Z","shell.execute_reply.started":"2024-06-08T17:38:57.974050Z","shell.execute_reply":"2024-06-08T17:38:57.989012Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Percentage of German: 0.42\n","output_type":"stream"}]},{"cell_type":"markdown","source":"** 4-5. What are the mean and standard deviation of age for those who earn more than 50K per year (*salary* feature) and those who earn less than 50K per year? **","metadata":{"_uuid":"be9911cf525df4fca2c1d14b8720bc8a82f462e7"}},{"cell_type":"code","source":"# You code here\nmore_50 = data[data['salary']=='<=50K']\nless_50 = data[data['salary']=='>50K']\nprint('Standard deviation whom Earn more than 50K')\nprint(more_50['age'].agg([np.mean,np.std]))\nprint('Standard deviation whom Earn less than 50K')\nprint(less_50['age'].agg([np.mean,np.std]))","metadata":{"_uuid":"97948f0115f949913d211627151b5605bcd204fd","execution":{"iopub.status.busy":"2024-06-08T17:45:58.131234Z","iopub.execute_input":"2024-06-08T17:45:58.131628Z","iopub.status.idle":"2024-06-08T17:45:58.170026Z","shell.execute_reply.started":"2024-06-08T17:45:58.131558Z","shell.execute_reply":"2024-06-08T17:45:58.168444Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Standard deviation whom Earn more than 50K\nmean    36.783738\nstd     14.020088\nName: age, dtype: float64\nStandard deviation whom Earn less than 50K\nmean    44.249841\nstd     10.519028\nName: age, dtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**6. Is it true that people who earn more than 50K have at least high school education? (*education – Bachelors, Prof-school, Assoc-acdm, Assoc-voc, Masters* or *Doctorate* feature)**","metadata":{"_uuid":"180c3fe6f8b250b877c1d86866067b80acabdb64"}},{"cell_type":"code","source":"# You code here\nsns.countplot(data=more_50, x='education')\nplt.xticks(rotation=90)\nplt.show()\nmore_50['education'].value_counts()","metadata":{"_uuid":"58f38ebfa2b0e1418a6a1a680d0743697f9876a2","execution":{"iopub.status.busy":"2024-06-08T17:51:40.334719Z","iopub.execute_input":"2024-06-08T17:51:40.335098Z","iopub.status.idle":"2024-06-08T17:51:40.697854Z","shell.execute_reply.started":"2024-06-08T17:51:40.335042Z","shell.execute_reply":"2024-06-08T17:51:40.696655Z"},"trusted":true},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"HS-grad         8826\nSome-college    5904\nBachelors       3134\n11th            1115\nAssoc-voc       1021\n10th             871\nAssoc-acdm       802\nMasters          764\n7th-8th          606\n9th              487\n12th             400\n5th-6th          317\n1st-4th          162\nProf-school      153\nDoctorate        107\nPreschool         51\nName: education, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"**7. Display age statistics for each race (*race* feature) and each gender (*sex* feature). Use *groupby()* and *describe()*. Find the maximum age of men of *Amer-Indian-Eskimo* race.**","metadata":{"_uuid":"87d6bc9ec1c230e66416ce94533ea250368009cc"}},{"cell_type":"code","source":"# You code here\ndata.groupby(['race','sex'])['age'].describe()","metadata":{"_uuid":"a4567b72200b583f7f2ee1583405d636c12169db","execution":{"iopub.status.busy":"2024-06-08T17:56:32.314891Z","iopub.execute_input":"2024-06-08T17:56:32.315209Z","iopub.status.idle":"2024-06-08T17:56:32.387856Z","shell.execute_reply.started":"2024-06-08T17:56:32.315151Z","shell.execute_reply":"2024-06-08T17:56:32.386686Z"},"trusted":true},"execution_count":69,"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"                             count       mean  ...     75%   max\nrace               sex                         ...              \nAmer-Indian-Eskimo Female    119.0  37.117647  ...   46.00  80.0\n                   Male      192.0  37.208333  ...   45.00  82.0\nAsian-Pac-Islander Female    346.0  35.089595  ...   43.75  75.0\n                   Male      693.0  39.073593  ...   46.00  90.0\nBlack              Female   1555.0  37.854019  ...   46.00  90.0\n                   Male     1569.0  37.682600  ...   46.00  90.0\nOther              Female    109.0  31.678899  ...   39.00  74.0\n                   Male      162.0  34.654321  ...   42.00  77.0\nWhite              Female   8642.0  36.811618  ...   46.00  90.0\n                   Male    19174.0  39.652498  ...   49.00  90.0\n\n[10 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>race</th>\n      <th>sex</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Amer-Indian-Eskimo</th>\n      <th>Female</th>\n      <td>119.0</td>\n      <td>37.117647</td>\n      <td>13.114991</td>\n      <td>17.0</td>\n      <td>27.0</td>\n      <td>36.0</td>\n      <td>46.00</td>\n      <td>80.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>192.0</td>\n      <td>37.208333</td>\n      <td>12.049563</td>\n      <td>17.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>45.00</td>\n      <td>82.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Asian-Pac-Islander</th>\n      <th>Female</th>\n      <td>346.0</td>\n      <td>35.089595</td>\n      <td>12.300845</td>\n      <td>17.0</td>\n      <td>25.0</td>\n      <td>33.0</td>\n      <td>43.75</td>\n      <td>75.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>693.0</td>\n      <td>39.073593</td>\n      <td>12.883944</td>\n      <td>18.0</td>\n      <td>29.0</td>\n      <td>37.0</td>\n      <td>46.00</td>\n      <td>90.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Black</th>\n      <th>Female</th>\n      <td>1555.0</td>\n      <td>37.854019</td>\n      <td>12.637197</td>\n      <td>17.0</td>\n      <td>28.0</td>\n      <td>37.0</td>\n      <td>46.00</td>\n      <td>90.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>1569.0</td>\n      <td>37.682600</td>\n      <td>12.882612</td>\n      <td>17.0</td>\n      <td>27.0</td>\n      <td>36.0</td>\n      <td>46.00</td>\n      <td>90.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Other</th>\n      <th>Female</th>\n      <td>109.0</td>\n      <td>31.678899</td>\n      <td>11.631599</td>\n      <td>17.0</td>\n      <td>23.0</td>\n      <td>29.0</td>\n      <td>39.00</td>\n      <td>74.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>162.0</td>\n      <td>34.654321</td>\n      <td>11.355531</td>\n      <td>17.0</td>\n      <td>26.0</td>\n      <td>32.0</td>\n      <td>42.00</td>\n      <td>77.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">White</th>\n      <th>Female</th>\n      <td>8642.0</td>\n      <td>36.811618</td>\n      <td>14.329093</td>\n      <td>17.0</td>\n      <td>25.0</td>\n      <td>35.0</td>\n      <td>46.00</td>\n      <td>90.0</td>\n    </tr>\n    <tr>\n      <th>Male</th>\n      <td>19174.0</td>\n      <td>39.652498</td>\n      <td>13.436029</td>\n      <td>17.0</td>\n      <td>29.0</td>\n      <td>38.0</td>\n      <td>49.00</td>\n      <td>90.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"amer_indian_man = data[(data['race'] == 'Amer-Indian-Eskimo') & (data['sex'] == 'Male')]['age'].max()\n\nprint(f'The max age of  Amer-Indian-Eskimo man is {amer_indian_man}')","metadata":{"execution":{"iopub.status.busy":"2024-06-08T18:01:25.492313Z","iopub.execute_input":"2024-06-08T18:01:25.492736Z","iopub.status.idle":"2024-06-08T18:01:25.517520Z","shell.execute_reply.started":"2024-06-08T18:01:25.492634Z","shell.execute_reply":"2024-06-08T18:01:25.516351Z"},"trusted":true},"execution_count":76,"outputs":[{"name":"stdout","text":"The max age of  Amer-Indian-Eskimo man is 82\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**8. Among whom is the proportion of those who earn a lot (>50K) greater: married or single men (*marital-status* feature)? Consider as married those who have a *marital-status* starting with *Married* (Married-civ-spouse, Married-spouse-absent or Married-AF-spouse), the rest are considered bachelors.**","metadata":{"_uuid":"19411d604b0d4337a4a048a2f0e898541f39ab76"}},{"cell_type":"code","source":"# You code here\nmen['marital-status'] = men['marital-status'].apply(lambda x: 'Married' if x.startswith('Married') else \"Single\")\nhigh_earner = men[men['salary'] == '<=50K']\nsns.countplot(data=high_earner, x='salary',hue='marital-status')","metadata":{"_uuid":"5bb3a8524fcbd794707075ccf6aaf8dd0f30a3dd","execution":{"iopub.status.busy":"2024-06-08T18:34:40.531114Z","iopub.execute_input":"2024-06-08T18:34:40.531488Z","iopub.status.idle":"2024-06-08T18:34:40.920106Z","shell.execute_reply.started":"2024-06-08T18:34:40.531433Z","shell.execute_reply":"2024-06-08T18:34:40.917524Z"},"trusted":true},"execution_count":96,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  \n","output_type":"stream"},{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f062c7bf390>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":"**9. What is the maximum number of hours a person works per week (*hours-per-week* feature)? How many people work such a number of hours, and what is the percentage of those who earn a lot (>50K) among them?**","metadata":{"_uuid":"34f2076e7d331b95a23b990372809b709d2c8183"}},{"cell_type":"code","source":"# You code here\nmax_hour = data['hours-per-week'].max()\nprint(f'Max time: {max_hour} hours/week')\nnum_workaholics = data[data['hours-per-week']==max_hour].shape[0]\nprint(f'Total number of hard workers: {num_workaholics} ')\nrich_share = float(data[(data['hours-per-week']==max_hour) & (data['salary'] == '>50K')].shape[0] / num_workaholics)\nprint(rich_share*100)","metadata":{"_uuid":"3571468172fc4bcf34e10b3d6ab358d4e41f7ef4","execution":{"iopub.status.busy":"2024-06-08T18:51:23.047577Z","iopub.execute_input":"2024-06-08T18:51:23.047926Z","iopub.status.idle":"2024-06-08T18:51:23.068719Z","shell.execute_reply.started":"2024-06-08T18:51:23.047872Z","shell.execute_reply":"2024-06-08T18:51:23.067687Z"},"trusted":true},"execution_count":116,"outputs":[{"name":"stdout","text":"Max time: 99 hours/week\nTotal number of hard workers: 85 \n29.411764705882355\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**10. Count the average time of work (*hours-per-week*) for those who earn a little and a lot (*salary*) for each country (*native-country*). What will these be for Japan?**","metadata":{"_uuid":"d539d4d137fac1c5ea25bc516188eb657d67e9b4"}},{"cell_type":"code","source":"# You code here","metadata":{"_uuid":"75a93411f1e3b519afcc27c026aaa0c67eb526e9","collapsed":true,"jupyter":{"outputs_hidden":true}},"execution_count":null,"outputs":[]}]}